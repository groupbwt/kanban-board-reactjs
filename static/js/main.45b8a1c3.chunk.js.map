{"version":3,"sources":["redux/tasks/index.js","redux/rootReducer.js","redux/store.js","redux/tasks/sagas.js","components/FormControls/Button/Button.jsx","components/Columns/Column/ColumnCreate.jsx","components/FormControls/Input/Input.jsx","components/Columns/Column/ColumnNew.jsx","components/FormControls/Textarea/Textarea.jsx","components/Modal/Modal.jsx","components/Columns/DeleteModal/DeleteModal.jsx","components/Columns/ColumnTitle/ColumnTitle.jsx","components/Columns/ColumnCard/ColumnCard.jsx","components/Columns/ColumnCards/ColumnCards.jsx","components/Columns/Column/Column.jsx","components/Columns/Columns.jsx","components/PageLoader/PageLoader.jsx","views/Dashboard/Dashboard.jsx","App.jsx","serviceWorker.js","index.jsx","components/Columns/ColumnCard/ColumnCard.module.scss","components/FormControls/Button/Button.module.scss","components/PageLoader/PageLoader.module.scss","components/Modal/Modal.module.scss","components/Columns/Columns.module.scss","components/FormControls/Input/Input.module.scss","components/FormControls/Textarea/Textarea.module.scss","components/Columns/ColumnTitle/ColumnTitle.module.scss","components/Columns/ColumnCards/ColumnCards.module.scss","views/Dashboard/Dashboard.module.scss","components/Columns/Column/Column.module.scss"],"names":["tasksAdapter","createEntityAdapter","tasksSlice","createSlice","name","initialState","getInitialState","newListTitle","newCardTitles","isTasksLoading","isLoadingNewList","isDeletingCard","isDeletingList","reducers","getTasks","state","tasksReceived","action","setAll","payload","tasksFailed","startCreateList","createdList","newList","id","uuidv4","cards","addOne","startDeletingList","deletedList","removeOne","onChangeNewListTitle","startCreateCard","entities","listId","isCreatingCard","createdCard","card","updatedList","getSelectors","selectById","updatedCards","newCard","order","length","push","updateOne","startDeletingCard","deletedCard","cardId","deletedCardIdx","findIndex","splice","onChangeNewCardTitle","value","changeCardOrder","changedCardOrder","toListId","fromListId","toOrder","fromOrder","toUpdatedList","fromUpdatedList","toUpdatedCards","fromUpdatedCards","updatedCard","find","startReordering","endReordering","i","startReorderingToList","endReorderingToList","startReorderingFromList","endReorderingFromList","updateMany","changeListOrder","changedListOrder","selectEntities","ids","selectIds","updatedEntities","list","TasksActions","actions","TasksSelectors","tasks","createReducer","injectedReducers","rootReducer","combineReducers","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","enhancers","createInjectorsEnhancer","configureStore","reducer","middleware","getDefaultMiddleware","thunk","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","preloadedState","devTools","process","configureAppStore","persistor","persistStore","createCard","createList","deleteList","deleteCard","watchersTasks","getTasksRequest","fetch","then","res","json","call","data","put","delay","title","dashboardElement","document","querySelector","scrollTop","scrollHeight","scrollLeft","scrollWidth","takeEvery","toString","Button","type","displayType","children","icon","className","color","loading","restProps","classnames","styles","button","button__icon","button__text","button__spinner","defaultProps","ColumnCreate","isCreatingColumn","onStartCreateColumn","classes","column","column__buttons","column__btn","onClick","disabled","faPlus","size","Input","props","input","ColumnNew","toggleStartedCreatingColumn","onAddList","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","trim","column__header","column__headerInput","onChange","target","autoFocus","placeholder","faTimes","Textarea","inputRef","textarea","ref","Modal","maxWidth","modal","modal__content","style","modal__overlay","createPortal","body","propTypes","PropTypes","oneOfType","string","number","node","DeleteModal","onDelete","onCancel","isCardDeleting","isListDeleting","useEffect","handler","keyCode","addEventListener","removeEventListener","onClickOverlay","ColumnTitle","memoizedComponent","memo","index","onDeleteCard","useState","isInitedDelete","setIsInitedDelete","toggleInitDelete","prevState","draggableId","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","oldProps","newProps","ColumnCards","map","Column","onDeleteList","onAddCard","prevProp","nextProp","isNotChangedCards","isNotChangedCardsLength","isNotChangedCreatingFlag","newCardTitle","isStartedCreatingCard","setIsStartedCreatingCard","isStartedDeletingList","setIsStartedDeletingList","cardTextareaRef","useRef","columnCardsRef","handleTextArea","Number","which","onCreateCard","toggleStartDeletingList","stopPropagation","toggleStartCreatCard","onChangeNewCardValue","onDelList","textareaElement","current","providedColumns","faTrashAlt","column__cards","droppableId","providedCards","droppableProps","minRows","maxRows","isNotChangedOrder","Columns","columns","onChangeCardOrder","onChangeListOrder","isStartedCreatingColumn","setIsStartedCreatingColumn","onDragEnd","result","destination","source","onDragListEnd","onDragCardEnd","direction","PageLoader","isLoading","box","loaded","spinner","Dashboard","this","dashboard","Component","connect","selectAll","injectSaga","saga","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.45b8a1c3.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst tasksAdapter = createEntityAdapter({});\r\n\r\nconst initialState = {\r\n  newListTitle: '',\r\n  newCardTitles: {},\r\n  isTasksLoading: false,\r\n  isLoadingNewList: false,\r\n  isDeletingCard: false,\r\n  isDeletingList: false,\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: tasksAdapter.getInitialState(initialState),\r\n  reducers: {\r\n    getTasks(state) {\r\n      state.isTasksLoading = true;\r\n    },\r\n    tasksReceived(state, action) {\r\n      state.isTasksLoading = false;\r\n      tasksAdapter.setAll(state, action.payload);\r\n    },\r\n    tasksFailed(state) {\r\n      state.isTasksLoading = false;\r\n    },\r\n    startCreateList(state) {\r\n      state.isLoadingNewList = true;\r\n    },\r\n    createdList(state, action) {\r\n      const newList = action.payload;\r\n      newList.id = uuidv4();\r\n      newList.cards = [];\r\n      tasksAdapter.addOne(state, action.payload);\r\n      state.newListTitle = '';\r\n      state.isLoadingNewList = false;\r\n    },\r\n    startDeletingList(state) {\r\n      state.isDeletingList = true;\r\n    },\r\n    deletedList(state, action) {\r\n      tasksAdapter.removeOne(state, action.payload);\r\n      state.isDeletingList = false;\r\n    },\r\n    onChangeNewListTitle(state, action) {\r\n      state.newListTitle = action.payload;\r\n    },\r\n    startCreateCard(state, action) {\r\n      state.entities[action.payload.listId].isCreatingCard = true;\r\n    },\r\n    createdCard(state, action) {\r\n      const { listId, card } = action.payload;\r\n      const updatedList = tasksAdapter.getSelectors().selectById(state, listId);\r\n      const updatedCards = updatedList.cards;\r\n      const newCard = card;\r\n      newCard.id = uuidv4();\r\n      newCard.order = updatedList.cards.length;\r\n\r\n      updatedCards.push(newCard);\r\n\r\n      updatedList.isCreatingCard = false;\r\n      state.newCardTitles[listId] = '';\r\n      tasksAdapter.updateOne(state, {\r\n        id: listId,\r\n        cards: updatedCards,\r\n      });\r\n    },\r\n    startDeletingCard(state) {\r\n      state.isDeletingCard = true;\r\n    },\r\n    deletedCard(state, action) {\r\n      const { listId, cardId } = action.payload;\r\n      const updatedList = tasksAdapter.getSelectors().selectById(state, listId);\r\n      const updatedCards = updatedList.cards;\r\n      const deletedCardIdx = updatedCards.findIndex(\r\n        (card) => card.id === cardId\r\n      );\r\n      if (deletedCardIdx > -1) {\r\n        updatedList.cards.splice(deletedCardIdx, 1);\r\n      }\r\n\r\n      tasksAdapter.updateOne(state, {\r\n        id: listId,\r\n        cards: updatedCards,\r\n      });\r\n      state.isDeletingCard = false;\r\n    },\r\n    onChangeNewCardTitle(state, action) {\r\n      const { listId, value = '' } = action.payload;\r\n      state.newCardTitles[listId] = value;\r\n    },\r\n    changeCardOrder() {},\r\n    changedCardOrder(state, action) {\r\n      const { cardId, toListId, fromListId, toOrder, fromOrder } = action.payload;\r\n      const toUpdatedList = tasksAdapter\r\n        .getSelectors()\r\n        .selectById(state, toListId);\r\n      const fromUpdatedList = tasksAdapter\r\n        .getSelectors()\r\n        .selectById(state, fromListId);\r\n      const toUpdatedCards = toUpdatedList.cards;\r\n      const fromUpdatedCards = fromUpdatedList.cards;\r\n\r\n      if (toListId === fromListId) {\r\n        const updatedCard = toUpdatedCards.find((card) => card.id === cardId);\r\n\r\n        toUpdatedCards.splice(fromOrder, 1);\r\n        toUpdatedCards.splice(toOrder, 0, updatedCard);\r\n\r\n        const startReordering =\r\n          updatedCard.order > toOrder ? toOrder : fromOrder;\r\n        const endReordering = updatedCard.order > toOrder ? fromOrder : toUpdatedCards.length - 1;\r\n\r\n        for (let i = startReordering; i <= endReordering; i += 1) {\r\n          const card = toUpdatedCards[i];\r\n          card.order = i;\r\n        }\r\n        updatedCard.order = toOrder;\r\n\r\n        tasksAdapter.updateOne(state, {\r\n          id: toListId,\r\n          cards: toUpdatedCards,\r\n        });\r\n      } else {\r\n        const updatedCard = fromUpdatedCards.find((card) => card.id === cardId);\r\n        updatedCard.order = toOrder;\r\n\r\n        fromUpdatedCards.splice(fromOrder, 1);\r\n        toUpdatedCards.splice(toOrder, 0, updatedCard);\r\n\r\n        const startReorderingToList = toOrder;\r\n        const endReorderingToList = toUpdatedCards.length - 1;\r\n        for (let i = startReorderingToList; i <= endReorderingToList; i += 1) {\r\n          const card = toUpdatedCards[i];\r\n          card.order = i;\r\n        }\r\n\r\n        const startReorderingFromList = fromOrder;\r\n        const endReorderingFromList = fromUpdatedCards.length - 1;\r\n        for (\r\n          let i = startReorderingFromList;\r\n          i <= endReorderingFromList;\r\n          i += 1\r\n        ) {\r\n          const card = fromUpdatedCards[i];\r\n          card.order = i;\r\n        }\r\n\r\n        tasksAdapter.updateMany(state, [\r\n          {\r\n            id: toListId,\r\n            cards: toUpdatedList,\r\n          },\r\n          {\r\n            id: fromListId,\r\n            cards: fromUpdatedList,\r\n          },\r\n        ]);\r\n      }\r\n    },\r\n    changeListOrder() {},\r\n    changedListOrder(state, action) {\r\n      const { listId, toOrder, fromOrder } = action.payload;\r\n      const entities = tasksAdapter.getSelectors().selectEntities(state);\r\n      const ids = tasksAdapter.getSelectors().selectIds(state);\r\n      const updatedList = tasksAdapter.getSelectors().selectById(state, listId);\r\n\r\n      ids.splice(fromOrder, 1);\r\n      ids.splice(toOrder, 0, listId);\r\n\r\n      const startReordering = toOrder > updatedList.order ? fromOrder : toOrder;\r\n      const endReordering = toOrder > updatedList.order ? toOrder : fromOrder;\r\n      const updatedEntities = [];\r\n\r\n      for (let i = startReordering; i <= endReordering; i += 1) {\r\n        const id = ids[i];\r\n        const list = entities[id];\r\n\r\n        list.order = i;\r\n        updatedEntities.push(list);\r\n      }\r\n      updatedList.order = toOrder;\r\n\r\n      tasksAdapter.updateMany(state, updatedEntities);\r\n    },\r\n  },\r\n});\r\n\r\nexport const TasksActions = tasksSlice.actions;\r\nexport const TasksSelectors = tasksAdapter.getSelectors((state) => state.tasks);\r\n\r\nexport default tasksSlice.reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport tasks from './tasks';\r\n\r\nexport function createReducer(injectedReducers = {}) {\r\n  const rootReducer = combineReducers({\r\n    ...injectedReducers,\r\n    tasks,\r\n  });\r\n\r\n  return rootReducer;\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createReducer } from './rootReducer';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['tasks'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, createReducer());\r\n\r\nfunction configureAppStore(initialState = {}) {\r\n  const reduxSagaMonitorOptions = {};\r\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\r\n  const { run: runSaga } = sagaMiddleware;\r\n\r\n  // sagaMiddleware: Makes redux-sagas work\r\n  const middlewares = [sagaMiddleware];\r\n\r\n  const enhancers = [\r\n    createInjectorsEnhancer({\r\n      createReducer,\r\n      runSaga,\r\n    }),\r\n  ];\r\n\r\n  const store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: [\r\n      ...getDefaultMiddleware({\r\n        thunk: false,\r\n        serializableCheck: {\r\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n      }),\r\n      ...middlewares,\r\n    ],\r\n    preloadedState: initialState,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    enhancers,\r\n  });\r\n\r\n  // Make reducers hot reloadable, see http://mxs.is/googmo\r\n  if (module.hot) {\r\n    module.hot.accept('./rootReducer', () => {\r\n      forceReducerReload(store);\r\n    });\r\n  }\r\n\r\n  return store;\r\n}\r\n\r\nexport const store = configureAppStore();\r\nexport const persistor = persistStore(store);\r\n","import { put, call, takeEvery, delay } from 'redux-saga/effects';\r\nimport { TasksActions } from './index';\r\n\r\nfunction getTasksRequest() {\r\n  return fetch('tasks.json').then((res) => res.json());\r\n}\r\n\r\nfunction* getTasks() {\r\n  try {\r\n    const data = yield call(getTasksRequest);\r\n    yield put(TasksActions.tasksReceived(data.tasks));\r\n  } catch (error) {\r\n    yield put(TasksActions.tasksFailed());\r\n  }\r\n}\r\n\r\nfunction* createCard(action) {\r\n  yield delay(800);\r\n  yield put(\r\n    TasksActions.createdCard({\r\n      listId: action.payload.listId,\r\n      card: {\r\n        title: action.payload.title,\r\n      },\r\n    })\r\n  );\r\n\r\n  const dashboardElement = document.querySelector(\r\n    `.dashboard__column-${action.payload.listId}-cards`\r\n  );\r\n  if (!dashboardElement) return;\r\n  dashboardElement.scrollTop = dashboardElement.scrollHeight;\r\n}\r\n\r\nfunction* createList(action) {\r\n  yield delay(800);\r\n  yield put(\r\n    TasksActions.createdList({\r\n      title: action.payload.title,\r\n    })\r\n  );\r\n\r\n  const dashboardElement = document.querySelector('.dashboard-page');\r\n  if (!dashboardElement) return;\r\n  dashboardElement.scrollLeft = dashboardElement.scrollWidth;\r\n}\r\n\r\nfunction* deleteList(action) {\r\n  yield delay(800);\r\n  yield put(TasksActions.deletedList(action.payload));\r\n}\r\n\r\nfunction* deleteCard(action) {\r\n  yield delay(800);\r\n  yield put(TasksActions.deletedCard(action.payload));\r\n}\r\n\r\nfunction* changeCardOrder(action) {\r\n  yield put(TasksActions.changedCardOrder(action.payload));\r\n}\r\n\r\nfunction* changeListOrder(action) {\r\n  yield put(TasksActions.changedListOrder(action.payload));\r\n}\r\n\r\nexport function* watchersTasks() {\r\n  yield takeEvery(TasksActions.getTasks.toString(), getTasks);\r\n  yield takeEvery(TasksActions.startCreateList.toString(), createList);\r\n  yield takeEvery(TasksActions.startDeletingList.toString(), deleteList);\r\n  yield takeEvery(TasksActions.startCreateCard.toString(), createCard);\r\n  yield takeEvery(TasksActions.startDeletingCard.toString(), deleteCard);\r\n  yield takeEvery(TasksActions.changeCardOrder.toString(), changeCardOrder);\r\n  yield takeEvery(TasksActions.changeListOrder.toString(), changeListOrder);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport styles from 'components/FormControls/Button/Button.module.scss';\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  displayType: PropTypes.string,\r\n  children: PropTypes.node,\r\n  icon: PropTypes.node,\r\n  className: PropTypes.string,\r\n  color: PropTypes.string,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n  displayType: 'default',\r\n  type: 'button',\r\n  loading: false,\r\n};\r\n\r\nfunction Button({\r\n  type,\r\n  displayType,\r\n  children,\r\n  icon,\r\n  className,\r\n  color,\r\n  loading,\r\n  ...restProps\r\n}) {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={classnames({\r\n        [styles.button]: true,\r\n        [styles['button--with-icon']]: !!icon,\r\n        [className]: !!className,\r\n        [styles.icon]: displayType === 'icon',\r\n        [styles.loading]: loading,\r\n      }, styles[color])}\r\n      {...restProps}\r\n    >\r\n      <div>\r\n        {icon && <span className={styles.button__icon}>{icon}</span>}\r\n        {displayType !== 'icon' && (\r\n          <>\r\n            <span className={styles.button__text}>{children}</span>\r\n          </>\r\n        )}\r\n      </div>\r\n      {loading && (\r\n        <>\r\n          <div className={styles.button__spinner} />\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport { Button };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport styles from './Column.module.scss';\r\n\r\nColumnCreate.propTypes = {\r\n  onStartCreateColumn: PropTypes.func.isRequired,\r\n  isCreatingColumn: PropTypes.bool.isRequired,\r\n};\r\n\r\nfunction ColumnCreate({ isCreatingColumn, onStartCreateColumn }) {\r\n  return (\r\n    <div className={classes(styles.column, styles['column--create'])}>\r\n      <div className={styles.column__buttons}>\r\n        <Button\r\n          className={styles.column__btn}\r\n          onClick={onStartCreateColumn}\r\n          disabled={isCreatingColumn}\r\n          icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n        >\r\n          Add another list\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { ColumnCreate };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport styles from './Input.module.scss';\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nfunction Input({ className, ...props }) {\r\n  return <input className={classes(className, styles.input)} {...props} />;\r\n}\r\n\r\nexport { Input };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport { Input } from 'components/FormControls/Input/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TasksActions } from 'redux/tasks';\r\nimport styles from './Column.module.scss';\r\n\r\nColumnNew.propTypes = {\r\n  toggleStartedCreatingColumn: PropTypes.func.isRequired,\r\n  onAddList: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction ColumnNew({ toggleStartedCreatingColumn, onAddList }) {\r\n  const newListTitle = useSelector((state) => state.tasks.newListTitle);\r\n  const isLoadingNewList = useSelector((state) => state.tasks.isLoadingNewList);\r\n  const dispatch = useDispatch();\r\n\r\n  function onChangeTitle(e) {\r\n    const { value } = e.target;\r\n\r\n    dispatch(TasksActions.onChangeNewListTitle(value));\r\n  }\r\n\r\n  function handleAddList(e) {\r\n    e.preventDefault();\r\n    if (!newListTitle.trim().length) return;\r\n\r\n    onAddList(newListTitle);\r\n  }\r\n\r\n  return (\r\n    <form className={classes(styles.column, styles['column--new'])} onSubmit={handleAddList} >\r\n      <div className={styles.column__header}>\r\n        <Input\r\n          className={styles.column__headerInput}\r\n          value={newListTitle}\r\n          onChange={onChangeTitle}\r\n          autoFocus\r\n          placeholder=\"Enter list title...\"\r\n        />\r\n      </div>\r\n      <div className={styles.column__buttons}>\r\n        <Button\r\n          type='submit'\r\n          className={styles['column__btn--create']}\r\n          loading={isLoadingNewList}\r\n          color=\"green\"\r\n          icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n        >\r\n          Add List\r\n        </Button>\r\n        <Button\r\n          displayType=\"icon\"\r\n          className={styles['column__btn--cancel']}\r\n          onClick={toggleStartedCreatingColumn}\r\n          disabled={isLoadingNewList}\r\n          color=\"transparent\"\r\n          icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport { ColumnNew };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport styles from './Textarea.module.scss';\r\n\r\nTextarea.propTypes = {\r\n  className: PropTypes.string,\r\n  inputRef: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\r\n};\r\nTextarea.defaultProps = {\r\n  className: '',\r\n};\r\n\r\nfunction Textarea({ className, inputRef, ...props }) {\r\n  return (\r\n    <TextareaAutosize\r\n      className={classes(styles.textarea, className)}\r\n      ref={inputRef}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Textarea };\r\n","import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Modal.module.scss';\r\n\r\nModal.propTypes = {\r\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  children: PropTypes.node,\r\n};\r\n\r\nModal.defaultProps = {\r\n  maxWidth: 350\r\n};\r\n\r\nfunction Modal({ maxWidth, children }) {\r\n  const modal = (\r\n    <div className={styles.modal}>\r\n      <div className={styles.modal__content} style={{ maxWidth }}>\r\n        {children}\r\n      </div>\r\n      <div className={styles.modal__overlay} />\r\n    </div>\r\n  );\r\n\r\n  return createPortal(modal, document.body);\r\n}\r\n\r\nexport { Modal };\r\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'components/Modal/Modal';\nimport { Button } from 'components/FormControls/Button/Button';\nimport styles from 'components/Columns/ColumnCard/ColumnCard.module.scss';\nimport { useSelector } from 'react-redux';\n\nDeleteModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onDelete: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nfunction DeleteModal({ title, maxWidth, onDelete, onCancel }) {\n  const isCardDeleting = useSelector((state) => state.tasks.isDeletingCard);\n  const isListDeleting = useSelector((state) => state.tasks.isDeletingList);\n\n  useEffect(() => {\n    function handler(e) {\n      if (e && e.keyCode === 27) {\n        onCancel(e);\n      }\n    }\n\n    document.addEventListener('keydown', handler);\n\n    return () => {\n      document.removeEventListener('keydown', handler);\n    };\n  }, []);\n\n  return (\n    <Modal maxWidth={maxWidth} onClickOverlay={onCancel}>\n      <div className={styles['card__delete-modal']}>\n        <div className={styles['delete-modal__title']}>\n          {`Are you sure to delete \"${title}\"?`}\n        </div>\n        <div className={styles['delete-modal__actions']}>\n          <Button\n            className={styles['delete-modal__btn']}\n            onClick={onDelete}\n            loading={isCardDeleting || isListDeleting}\n            color=\"red\"\n          >\n            Delete\n          </Button>\n          <Button\n            className={styles['delete-modal__btn']}\n            onClick={onCancel}\n            disabled={isCardDeleting || isListDeleting}\n            color=\"dark-gray\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport { DeleteModal };\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ColumnTitle.module.scss';\r\n\r\nColumnTitle.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction ColumnTitle({ children }) {\r\n  return <h3 className={styles.title}>{children}</h3>;\r\n}\r\n\r\nexport { ColumnTitle };\r\n","import React, { useState, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { DeleteModal } from 'components/Columns/DeleteModal/DeleteModal';\r\nimport styles from './ColumnCard.module.scss';\r\n\r\nColumnCard.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  listId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction ColumnCard({ index, id, listId, title, onDeleteCard }) {\r\n  const [isInitedDelete, setIsInitedDelete] = useState(false);\r\n\r\n  function toggleInitDelete() {\r\n    setIsInitedDelete((prevState) => !prevState);\r\n  }\r\n\r\n  function onDelete() {\r\n    onDeleteCard(listId, id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Draggable draggableId={id} index={index}>\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <div\r\n              className={classes(styles.card, {\r\n                [styles['card--is-dragging']]: snapshot.isDragging,\r\n              })}\r\n            >\r\n              {title}\r\n              <Button\r\n                displayType=\"icon\"\r\n                className={styles['card__delete-btn']}\r\n                onClick={toggleInitDelete}\r\n                color=\"red\"\r\n                icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n\r\n      {isInitedDelete && (\r\n        <DeleteModal\r\n          title={title}\r\n          onDelete={onDelete}\r\n          onCancel={toggleInitDelete}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst memoizedComponent = memo(ColumnCard, (oldProps, newProps) => {\r\n  const isNotChangedOrder = oldProps.index === newProps.index;\r\n\r\n  return isNotChangedOrder;\r\n});\r\n\r\nexport { memoizedComponent as ColumnCard };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ColumnCards.module.scss';\r\nimport { ColumnCard } from '../ColumnCard/ColumnCard';\r\n\r\nColumnCards.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.object),\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\nColumnCards.defaultProps = {\r\n  cards: [],\r\n};\r\n\r\nfunction ColumnCards({ id, cards, onDeleteCard }) {\r\n  if (cards && !cards.length) return null;\r\n\r\n  return (\r\n    <ul className={styles.cards}>\r\n      {cards.map((card, index) => (\r\n        <ColumnCard\r\n          key={card.id}\r\n          index={index}\r\n          id={card.id}\r\n          listId={id}\r\n          title={card.title}\r\n          onDeleteCard={onDeleteCard}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport { ColumnCards };\r\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classes from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { TasksActions } from 'redux/tasks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimes, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { Button } from 'components/FormControls/Button/Button';\nimport { Textarea } from 'components/FormControls/Textarea/Textarea';\nimport { DeleteModal } from 'components/Columns/DeleteModal/DeleteModal';\nimport { ColumnTitle } from '../ColumnTitle/ColumnTitle';\nimport { ColumnCards } from '../ColumnCards/ColumnCards';\nimport styles from './Column.module.scss';\n\nColumn.propTypes = {\n  index: PropTypes.number.isRequired,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  title: PropTypes.string,\n  cards: PropTypes.arrayOf(PropTypes.object),\n  onDeleteList: PropTypes.func.isRequired,\n  onAddCard: PropTypes.func.isRequired,\n  onDeleteCard: PropTypes.func.isRequired,\n};\nColumn.defaultProps = {\n  cards: [],\n};\n\nfunction Column({\n  index,\n  id,\n  title,\n  cards,\n  onDeleteList,\n  onAddCard,\n  onDeleteCard,\n}) {\n  const column = useSelector(\n    (state) => state.tasks.entities[id],\n    (prevProp, nextProp) => {\n      const isNotChangedCards = prevProp.cards === nextProp.cards;\n      const isNotChangedCardsLength =\n        prevProp.cards.length === nextProp.cards.length;\n      const isNotChangedCreatingFlag =\n        prevProp.isCreatingCard === nextProp.isCreatingCard;\n\n      return isNotChangedCards && isNotChangedCardsLength && isNotChangedCreatingFlag;\n    }\n  );\n  const newCardTitle = useSelector(\n    (state) => state.tasks.newCardTitles[id],\n    (prevProp, nextProp) => prevProp === nextProp\n  );\n  const [isStartedCreatingCard, setIsStartedCreatingCard] = useState(false);\n  const [isStartedDeletingList, setIsStartedDeletingList] = useState(false);\n  const dispatch = useDispatch();\n  const cardTextareaRef = useRef();\n  const columnCardsRef = useRef();\n\n  useEffect(() => {\n    const textareaElement = cardTextareaRef.current;\n\n    if (!isStartedCreatingCard || !textareaElement) return;\n\n    textareaElement.addEventListener('keypress', handleTextArea);\n\n    // eslint-disable-next-line\n    return () => {\n      if (!textareaElement) return;\n\n      textareaElement.removeEventListener('keypress', handleTextArea);\n    };\n  }, [cardTextareaRef, isStartedCreatingCard, newCardTitle]);\n\n  function handleTextArea(e) {\n    if (e && Number(e.which) === 13) {\n      e.preventDefault();\n      onCreateCard();\n    }\n  }\n\n  function toggleStartDeletingList(e) {\n    e.stopPropagation();\n\n    setIsStartedDeletingList((prevState) => !prevState);\n  }\n\n  function toggleStartCreatCard() {\n    if (!isStartedCreatingCard) {\n      dispatch(\n        TasksActions.onChangeNewCardTitle({\n          listId: id,\n          value: '',\n        })\n      );\n    }\n\n    setIsStartedCreatingCard((prevState) => !prevState);\n  }\n\n  function onChangeNewCardValue(e) {\n    const { value } = e.target;\n\n    dispatch(\n      TasksActions.onChangeNewCardTitle({\n        listId: id,\n        value,\n      })\n    );\n  }\n\n  function onDelList() {\n    onDeleteList(id);\n  }\n\n  function onCreateCard() {\n    if (!newCardTitle.trim().length) return;\n    onAddCard({\n      listId: id,\n      title: newCardTitle,\n    });\n  }\n\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(providedColumns) => (\n        <>\n          <div\n            ref={providedColumns.innerRef}\n            className={styles.column}\n            {...providedColumns.draggableProps}\n          >\n            <div\n              className={styles.column__header}\n              {...providedColumns.dragHandleProps}\n            >\n              <ColumnTitle>{title}</ColumnTitle>\n              <Button\n                displayType=\"icon\"\n                className={styles['column__delete-list-btn']}\n                onClick={toggleStartDeletingList}\n                color=\"red\"\n                icon={<FontAwesomeIcon icon={faTrashAlt} />}\n              />\n            </div>\n\n            <div\n              ref={columnCardsRef}\n              className={classes(\n                styles.column__cards,\n                `dashboard__column-${id}-cards`\n              )}\n            >\n              <Droppable droppableId={id} type=\"card\">\n                {(providedCards) => (\n                  <div\n                    ref={providedCards.innerRef}\n                    className={styles['column__drop-zone']}\n                    {...providedCards.droppableProps}\n                  >\n                    <ColumnCards\n                      id={id}\n                      cards={cards}\n                      onDeleteCard={onDeleteCard}\n                    />\n                    {providedCards.placeholder}\n                  </div>\n                )}\n              </Droppable>\n\n              {isStartedCreatingCard && (\n                <Textarea\n                  inputRef={cardTextareaRef}\n                  value={newCardTitle}\n                  onChange={onChangeNewCardValue}\n                  placeholder=\"Enter a title for this card...\"\n                  minRows={3}\n                  maxRows={7}\n                  autoFocus\n                />\n              )}\n            </div>\n            <div className={styles.column__buttons}>\n              {isStartedCreatingCard && (\n                <>\n                  <Button\n                    className={styles['column__btn--create']}\n                    onClick={onCreateCard}\n                    loading={column.isCreatingCard}\n                    color=\"green\"\n                    icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\n                  >\n                    Add Card\n                  </Button>\n                  <Button\n                    displayType=\"icon\"\n                    onClick={toggleStartCreatCard}\n                    className={styles['column__btn--cancel']}\n                    color=\"transparent\"\n                    disabled={column.isCreatingCard}\n                    icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\n                  />\n                </>\n              )}\n              {!isStartedCreatingCard && (\n                <Button\n                  onClick={toggleStartCreatCard}\n                  className={styles.column__btn}\n                  icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\n                >\n                  Add a card\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {isStartedDeletingList && (\n            <DeleteModal\n              title={title}\n              maxWidth={400}\n              onDelete={onDelList}\n              onCancel={toggleStartDeletingList}\n            />\n          )}\n        </>\n      )}\n    </Draggable>\n  );\n}\n\nconst memoizedComponent = memo(Column, (oldProps, newProps) => {\n  const isNotChangedOrder = oldProps.index === newProps.index;\n  const isNotChangedCards = oldProps.cards === newProps.cards;\n\n  return isNotChangedCards && isNotChangedOrder;\n});\n\nexport { memoizedComponent as Column };\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { ColumnCreate } from './Column/ColumnCreate';\r\nimport { ColumnNew } from './Column/ColumnNew';\r\nimport { Column } from './Column/Column';\r\nimport styles from './Columns.module.scss';\r\n\r\nColumns.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.object),\r\n  onAddList: PropTypes.func.isRequired,\r\n  onDeleteList: PropTypes.func.isRequired,\r\n  onAddCard: PropTypes.func.isRequired,\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n  onChangeCardOrder: PropTypes.func.isRequired,\r\n  onChangeListOrder: PropTypes.func.isRequired,\r\n};\r\nColumns.defaultProps = {\r\n  columns: [],\r\n};\r\n\r\nfunction Columns({\r\n  columns,\r\n  onAddList,\r\n  onDeleteList,\r\n  onAddCard,\r\n  onDeleteCard,\r\n  onChangeCardOrder,\r\n  onChangeListOrder,\r\n}) {\r\n  const [isStartedCreatingColumn, setIsStartedCreatingColumn] = useState(false);\r\n\r\n  function toggleStartedCreatingColumn() {\r\n    setIsStartedCreatingColumn((prevState) => !prevState);\r\n  }\r\n\r\n  function onDragEnd(result) {\r\n    const { destination, source, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (type === 'list') {\r\n      onDragListEnd(result);\r\n    }\r\n\r\n    if (type === 'card') {\r\n      onDragCardEnd(result);\r\n    }\r\n  }\r\n\r\n  function onDragListEnd(result) {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    const toOrder = destination.index;\r\n    const fromOrder = source.index;\r\n\r\n    onChangeListOrder({\r\n      listId: draggableId,\r\n      toOrder,\r\n      fromOrder,\r\n    });\r\n  }\r\n\r\n  function onDragCardEnd(result) {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    const toListId = destination.droppableId;\r\n    const fromListId = source.droppableId;\r\n    const toOrder = destination.index;\r\n    const fromOrder = source.index;\r\n\r\n    onChangeCardOrder({\r\n      cardId: draggableId,\r\n      toListId,\r\n      fromListId,\r\n      toOrder,\r\n      fromOrder,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"list\" direction=\"horizontal\" type=\"list\">\r\n        {(provided) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            className={styles.columns}\r\n            {...provided.droppableProps}\r\n          >\r\n            {columns.map((column, index) => (\r\n              <Column\r\n                index={index}\r\n                key={column.id}\r\n                id={column.id}\r\n                cards={column.cards}\r\n                title={column.title}\r\n                onAddCard={onAddCard}\r\n                onDeleteList={onDeleteList}\r\n                onDeleteCard={onDeleteCard}\r\n              />\r\n            ))}\r\n            {provided.placeholder}\r\n            {isStartedCreatingColumn && (\r\n              <ColumnNew\r\n                onAddList={onAddList}\r\n                toggleStartedCreatingColumn={toggleStartedCreatingColumn}\r\n              />\r\n            )}\r\n            <ColumnCreate\r\n              isCreatingColumn={isStartedCreatingColumn}\r\n              onStartCreateColumn={toggleStartedCreatingColumn}\r\n            />\r\n            <div className={styles['columns__demy-column']} />\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport { Columns };\r\n","import React from 'react';\r\nimport classes from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './PageLoader.module.scss';\r\n\r\nPageLoader.propTypes = {\r\n  isLoading: PropTypes.bool,\r\n};\r\n\r\nPageLoader.defaultProps = {\r\n  isLoading: false,\r\n};\r\n\r\nfunction PageLoader({ isLoading }) {\r\n  if (!isLoading) return null;\r\n\r\n  return (\r\n    <div\r\n      className={classes(\r\n        styles.box,\r\n        { [styles.loading]: isLoading },\r\n        { [styles.loaded]: !isLoading }\r\n      )}\r\n    >\r\n      <div className={styles.spinner}>\r\n        <span>Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { PageLoader };\r\n","import React, { Component } from 'react';\r\nimport classes from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { injectSaga } from 'redux-injectors';\r\nimport { watchersTasks } from 'redux/tasks/sagas';\r\nimport { Columns } from 'components/Columns/Columns';\r\nimport { TasksActions, TasksSelectors } from 'redux/tasks';\r\nimport { PageLoader } from 'components/PageLoader/PageLoader';\r\nimport styles from './Dashboard.module.scss';\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    const { getTasks, tasks } = this.props;\r\n    if (!tasks.length) {\r\n      getTasks();\r\n    }\r\n  }\r\n\r\n  onAddList = (title) => {\r\n    const { startCreateList } = this.props;\r\n    startCreateList({ title });\r\n  };\r\n\r\n  onDeleteList = (listId) => {\r\n    const { startDeletingList } = this.props;\r\n    startDeletingList(listId);\r\n  };\r\n\r\n  onAddCard = (payload) => {\r\n    const { startCreateCard } = this.props;\r\n    startCreateCard(payload);\r\n  };\r\n\r\n  onDeleteCard = (listId, cardId) => {\r\n    const { startDeletingCard } = this.props;\r\n\r\n    startDeletingCard({ listId, cardId });\r\n  };\r\n\r\n  onChangeCardOrder = (payload) => {\r\n    const { onChangeCardOrder } = this.props;\r\n    onChangeCardOrder(payload);\r\n  };\r\n\r\n  onChangeListOrder = (payload) => {\r\n    const { onChangeListOrder } = this.props;\r\n    onChangeListOrder(payload);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, isTasksLoading } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <div className={classes(styles.dashboard, 'dashboard-page')}>\r\n          <Columns\r\n            columns={tasks}\r\n            onAddList={this.onAddList}\r\n            onDeleteList={this.onDeleteList}\r\n            onAddCard={this.onAddCard}\r\n            onDeleteCard={this.onDeleteCard}\r\n            onChangeCardOrder={this.onChangeCardOrder}\r\n            onChangeListOrder={this.onChangeListOrder}\r\n          />\r\n        </div>\r\n        <PageLoader isLoading={isTasksLoading} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  tasks: PropTypes.arrayOf(PropTypes.object),\r\n  isTasksLoading: PropTypes.bool.isRequired,\r\n  getTasks: PropTypes.func.isRequired,\r\n  startCreateList: PropTypes.func.isRequired,\r\n  startDeletingList: PropTypes.func.isRequired,\r\n  startCreateCard: PropTypes.func.isRequired,\r\n  startDeletingCard: PropTypes.func.isRequired,\r\n  onChangeCardOrder: PropTypes.func.isRequired,\r\n  onChangeListOrder: PropTypes.func.isRequired,\r\n};\r\n\r\nDashboard.defaultProps = {\r\n  tasks: [],\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: TasksSelectors.selectAll(state),\r\n  isTasksLoading: state.tasks.isTasksLoading,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTasks: () => dispatch(TasksActions.getTasks()),\r\n  startCreateList: (title) => dispatch(TasksActions.startCreateList(title)),\r\n  startDeletingList: (listId) =>\r\n    dispatch(TasksActions.startDeletingList(listId)),\r\n  startCreateCard: (payload) => dispatch(TasksActions.startCreateCard(payload)),\r\n  startDeletingCard: (payload) =>\r\n    dispatch(TasksActions.startDeletingCard(payload)),\r\n  onChangeCardOrder: (payload) =>\r\n    dispatch(TasksActions.changeCardOrder(payload)),\r\n  onChangeListOrder: (payload) =>\r\n    dispatch(TasksActions.changeListOrder(payload)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(injectSaga({ key: 'tasks', saga: watchersTasks })(Dashboard));\r\n","import React from 'react';\r\nimport Dashboard from 'views/Dashboard/Dashboard';\r\n\r\nfunction App() {\r\n  return <Dashboard />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport 'normalize.css';\r\nimport './styles/styles.scss';\r\nimport { persistor, store } from 'redux/store';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ColumnCard_card__3qMqY\",\"card--is-dragging\":\"ColumnCard_card--is-dragging__2Xtvm\",\"card__delete-btn\":\"ColumnCard_card__delete-btn__3lY27\",\"delete-modal__title\":\"ColumnCard_delete-modal__title__3Y0eQ\",\"delete-modal__actions\":\"ColumnCard_delete-modal__actions__7AQly\",\"delete-modal__btn\":\"ColumnCard_delete-modal__btn__Lszce\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2XPbj\",\"button--with-icon\":\"Button_button--with-icon__2mTBF\",\"button__text\":\"Button_button__text__3pwWn\",\"icon\":\"Button_icon__1WJdU\",\"green\":\"Button_green__1TOMw\",\"red\":\"Button_red__3fO7b\",\"dark-gray\":\"Button_dark-gray__nL9kN\",\"transparent\":\"Button_transparent__17AuW\",\"loading\":\"Button_loading__VYV8W\",\"button__icon\":\"Button_button__icon__3WrMJ\",\"button__spinner\":\"Button_button__spinner__KASpU\",\"spinner\":\"Button_spinner__3OUQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"PageLoader_box__3RvKg\",\"spinner\":\"PageLoader_spinner__RcNXU\",\"spinner_loading_text\":\"PageLoader_spinner_loading_text__30XJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3kgh3\",\"modal__content\":\"Modal_modal__content__1ILQq\",\"modal__overlay\":\"Modal_modal__overlay__c1s7q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"columns\":\"Columns_columns__lzzwH\",\"columns__demy-column\":\"Columns_columns__demy-column__WrYhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2ZPX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__20Vs3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ColumnTitle_title__3gobv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"ColumnCards_cards__-bKoe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__3f3Dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"Column_column__3yOFN\",\"column__header\":\"Column_column__header__1h3fQ\",\"column--new\":\"Column_column--new__2yyfC\",\"column__delete-list-btn\":\"Column_column__delete-list-btn__3wwCm\",\"column__headerInput\":\"Column_column__headerInput__3RRuk\",\"column__cards\":\"Column_column__cards__2EVMA\",\"column__drop-zone\":\"Column_column__drop-zone__1xiBL\",\"column__buttons\":\"Column_column__buttons__25buy\",\"column--create\":\"Column_column--create__3V9bk\",\"column__btn\":\"Column_column__btn__3Hseg\",\"column__btn--create\":\"Column_column__btn--create__3t0ct\",\"column__btn--cancel\":\"Column_column__btn--cancel__auBDM\"};"],"sourceRoot":""}