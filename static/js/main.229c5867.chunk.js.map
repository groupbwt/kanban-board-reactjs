{"version":3,"sources":["redux/tasks/index.js","redux/rootReducer.js","redux/store.js","redux/tasks/sagas.js","components/FormControls/Button/Button.jsx","components/Columns/Column/ColumnCreate.jsx","components/FormControls/Input/Input.jsx","components/Columns/Column/ColumnNew.jsx","components/FormControls/Textarea/Textarea.jsx","components/Modal/Modal.jsx","components/Columns/DeleteModal/DeleteModal.jsx","components/Columns/ColumnTitle/ColumnTitle.jsx","components/Columns/ColumnCard/ColumnCard.jsx","components/Columns/ColumnCards/ColumnCards.jsx","components/Columns/Column/Column.jsx","components/Columns/Columns.jsx","views/Dashboard/Dashboard.jsx","App.jsx","serviceWorker.js","index.jsx","components/Columns/ColumnCard/ColumnCard.module.scss","components/FormControls/Button/Button.module.scss","components/Modal/Modal.module.scss","components/Columns/Columns.module.scss","components/Columns/Column/Column.module.scss","components/FormControls/Input/Input.module.scss","components/FormControls/Textarea/Textarea.module.scss","components/Columns/ColumnTitle/ColumnTitle.module.scss","components/Columns/ColumnCards/ColumnCards.module.scss","views/Dashboard/Dashboard.module.scss"],"names":["tasksAdapter","createEntityAdapter","tasksSlice","createSlice","name","initialState","getInitialState","newListTitle","newCardTitles","isLoading","isLoadingNewList","isDeletingCard","isDeletingList","reducers","getTasks","state","tasksReceived","action","setAll","payload","tasksFailed","startCreateList","createdList","addOne","startDeletingList","deletedList","removeOne","onChangeNewListTitle","startCreateCard","entities","listId","isCreatingCard","createdCard","card","cards","push","startDeletingCard","deletedCard","cardId","updatedList","getSelectors","selectById","updatedCards","deletedCardIdx","findIndex","id","splice","updateOne","onChangeNewCardTitle","value","TasksActions","actions","TasksSelectors","tasks","createReducer","injectedReducers","rootReducer","combineReducers","store","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","enhancers","createInjectorsEnhancer","configureStore","reducer","middleware","getDefaultMiddleware","thunk","preloadedState","devTools","process","configureAppStore","createCard","createList","deleteList","deleteCard","watchersTasks","getTasksRequest","fetch","then","res","json","call","data","put","delay","uuidv4","title","dashboardElement","document","querySelector","scrollTop","scrollHeight","scrollLeft","scrollWidth","takeEvery","toString","Button","type","displayType","children","icon","className","color","loading","restProps","classnames","styles","button","button__icon","button__text","button__spinner","defaultProps","ColumnCreate","isCreatingColumn","onStartCreateColumn","classes","column","column__buttons","column__btn","onClick","disabled","faPlus","size","Input","props","input","ColumnNew","toggleStartedCreatingColumn","onAddList","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","trim","length","column__header","column__headerInput","onChange","target","autoFocus","placeholder","faTimes","Textarea","inputRef","textarea","ref","Modal","maxWidth","modal","modal__content","style","modal__overlay","createPortal","body","propTypes","PropTypes","oneOfType","string","number","node","DeleteModal","isDeleting","onDelete","onCancel","ColumnTitle","ColumnCard","onDeleteCard","useState","isInitedDelete","setIsInitedDelete","toggleInitDelete","prevState","ColumnCards","map","key","Column","onDeleteList","onAddCard","newCardTitle","isListDeleting","isStartedCreatingCard","setIsStartedCreatingCard","isStartedDeletingList","setIsStartedDeletingList","cardTextareaRef","useRef","columnCardsRef","handleTextArea","Number","which","onCreateCard","toggleStartDeletingList","toggleStartCreatCard","useEffect","textareaElement","current","addEventListener","removeEventListener","faTrashAlt","column__cards","minRows","maxRows","Columns","columns","isStartedCreatingColumn","setIsStartedCreatingColumn","Dashboard","this","dashboard","Component","connect","selectAll","injectSaga","saga","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.229c5867.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\r\n\r\nconst tasksAdapter = createEntityAdapter({});\r\n\r\nconst initialState = {\r\n  newListTitle: '',\r\n  newCardTitles: {},\r\n  isLoading: false,\r\n  isLoadingNewList: false,\r\n  isDeletingCard: false,\r\n  isDeletingList: false,\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: tasksAdapter.getInitialState(initialState),\r\n  reducers: {\r\n    getTasks(state) {\r\n      state.isLoading = true;\r\n    },\r\n    tasksReceived(state, action) {\r\n      state.isLoading = false;\r\n      tasksAdapter.setAll(state, action.payload);\r\n    },\r\n    tasksFailed(state) {\r\n      state.isLoading = false;\r\n    },\r\n    startCreateList(state) {\r\n      state.isLoadingNewList = true;\r\n    },\r\n    createdList(state, action) {\r\n      tasksAdapter.addOne(state, action.payload);\r\n      state.newListTitle = '';\r\n      state.isLoadingNewList = false;\r\n    },\r\n    startDeletingList(state) {\r\n      state.isDeletingList = true;\r\n    },\r\n    deletedList(state, action) {\r\n      tasksAdapter.removeOne(state, action.payload);\r\n      state.isDeletingList = false;\r\n    },\r\n    onChangeNewListTitle(state, action) {\r\n      state.newListTitle = action.payload;\r\n    },\r\n    startCreateCard(state, action) {\r\n      state.entities[action.payload.listId].isCreatingCard = true;\r\n    },\r\n    createdCard(state, action) {\r\n      const { listId, card } = action.payload;\r\n      state.entities[listId].isCreatingCard = false;\r\n      state.newCardTitles[listId] = '';\r\n      state.entities[listId].cards.push(card);\r\n    },\r\n    startDeletingCard(state) {\r\n      state.isDeletingCard = true;\r\n    },\r\n    deletedCard(state, action) {\r\n      const { listId, cardId } = action.payload;\r\n      const updatedList = tasksAdapter.getSelectors().selectById(state, listId);\r\n      const updatedCards = updatedList.cards;\r\n      const deletedCardIdx = updatedCards.findIndex(\r\n        (card) => card.id === cardId\r\n      );\r\n      if (deletedCardIdx > -1) {\r\n        updatedList.cards.splice(deletedCardIdx, 1);\r\n      }\r\n\r\n      tasksAdapter.updateOne(state, {\r\n        id: listId,\r\n        cards: updatedCards,\r\n      });\r\n      state.isDeletingCard = false;\r\n    },\r\n    onChangeNewCardTitle(state, action) {\r\n      const { listId, value = '' } = action.payload;\r\n      state.newCardTitles[listId] = value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const TasksActions = tasksSlice.actions;\r\nexport const TasksSelectors = tasksAdapter.getSelectors((state) => state.tasks);\r\n\r\nexport default tasksSlice.reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport tasks from './tasks';\r\n\r\nexport function createReducer(injectedReducers = {}) {\r\n  const rootReducer = combineReducers({\r\n    ...injectedReducers,\r\n    tasks,\r\n  });\r\n\r\n  return rootReducer;\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createReducer } from './rootReducer';\r\n\r\nfunction configureAppStore(initialState = {}) {\r\n  const reduxSagaMonitorOptions = {};\r\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\r\n  const { run: runSaga } = sagaMiddleware;\r\n\r\n  // sagaMiddleware: Makes redux-sagas work\r\n  const middlewares = [sagaMiddleware];\r\n\r\n  const enhancers = [\r\n    createInjectorsEnhancer({\r\n      createReducer,\r\n      runSaga,\r\n    }),\r\n  ];\r\n\r\n  const store = configureStore({\r\n    reducer: createReducer(),\r\n    middleware: [...getDefaultMiddleware({ thunk: false }), ...middlewares],\r\n    preloadedState: initialState,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    enhancers,\r\n  });\r\n\r\n  // Make reducers hot reloadable, see http://mxs.is/googmo\r\n  /* istanbul ignore next */\r\n  if (module.hot) {\r\n    module.hot.accept('./rootReducer', () => {\r\n      forceReducerReload(store);\r\n    });\r\n  }\r\n\r\n  return store;\r\n}\r\n\r\nexport const store = configureAppStore();\r\n","import { put, call, takeEvery, delay } from 'redux-saga/effects';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { TasksActions } from './index';\r\n\r\nfunction getTasksRequest() {\r\n  return fetch('tasks.json').then((res) => res.json());\r\n}\r\n\r\nfunction* getTasks() {\r\n  try {\r\n    const data = yield call(getTasksRequest);\r\n    yield put(TasksActions.tasksReceived(data.tasks));\r\n  } catch (error) {\r\n    yield put(TasksActions.tasksFailed());\r\n  }\r\n}\r\n\r\nfunction* createCard(action) {\r\n  yield delay(800);\r\n  yield put(\r\n    TasksActions.createdCard({\r\n      listId: action.payload.listId,\r\n      card: {\r\n        id: uuidv4(),\r\n        title: action.payload.title,\r\n      },\r\n    })\r\n  );\r\n\r\n  const dashboardElement = document.querySelector(\r\n    `.dashboard__column-${action.payload.listId}-cards`\r\n  );\r\n  if (!dashboardElement) return;\r\n  dashboardElement.scrollTop = dashboardElement.scrollHeight;\r\n}\r\n\r\nfunction* createList(action) {\r\n  yield delay(800);\r\n  yield put(\r\n    TasksActions.createdList({\r\n      id: uuidv4(),\r\n      title: action.payload.title,\r\n      cards: [],\r\n    })\r\n  );\r\n\r\n  const dashboardElement = document.querySelector('.dashboard-page');\r\n  if (!dashboardElement) return;\r\n  dashboardElement.scrollLeft = dashboardElement.scrollWidth;\r\n}\r\n\r\nfunction* deleteList(action) {\r\n  yield delay(800);\r\n  yield put(TasksActions.deletedList(action.payload));\r\n}\r\n\r\nfunction* deleteCard(action) {\r\n  yield delay(800);\r\n  yield put(TasksActions.deletedCard(action.payload));\r\n}\r\n\r\nexport function* watchersTasks() {\r\n  yield takeEvery(TasksActions.getTasks.toString(), getTasks);\r\n  yield takeEvery(TasksActions.startCreateList.toString(), createList);\r\n  yield takeEvery(TasksActions.startDeletingList.toString(), deleteList);\r\n  yield takeEvery(TasksActions.startCreateCard.toString(), createCard);\r\n  yield takeEvery(TasksActions.startDeletingCard.toString(), deleteCard);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport styles from 'components/FormControls/Button/Button.module.scss';\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  displayType: PropTypes.string,\r\n  children: PropTypes.node,\r\n  icon: PropTypes.node,\r\n  className: PropTypes.string,\r\n  color: PropTypes.string,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n  displayType: 'default',\r\n  type: 'button',\r\n  loading: false,\r\n};\r\n\r\nfunction Button({\r\n  type,\r\n  displayType,\r\n  children,\r\n  icon,\r\n  className,\r\n  color,\r\n  loading,\r\n  ...restProps\r\n}) {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={classnames({\r\n        [styles.button]: true,\r\n        [styles['button--with-icon']]: !!icon,\r\n        [className]: !!className,\r\n        [styles.icon]: displayType === 'icon',\r\n        [styles.loading]: loading,\r\n      }, styles[color])}\r\n      {...restProps}\r\n    >\r\n      <div>\r\n        {icon && <span className={styles.button__icon}>{icon}</span>}\r\n        {displayType !== 'icon' && (\r\n          <>\r\n            <span className={styles.button__text}>{children}</span>\r\n          </>\r\n        )}\r\n      </div>\r\n      {loading && (\r\n        <>\r\n          <div className={styles.button__spinner} />\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport { Button };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport styles from './Column.module.scss';\r\n\r\nColumnCreate.propTypes = {\r\n  onStartCreateColumn: PropTypes.func.isRequired,\r\n  isCreatingColumn: PropTypes.bool.isRequired,\r\n};\r\n\r\nfunction ColumnCreate({ isCreatingColumn, onStartCreateColumn }) {\r\n  return (\r\n    <div className={classes(styles.column, styles['column--create'])}>\r\n      <div className={styles.column__buttons}>\r\n        <Button\r\n          className={styles.column__btn}\r\n          onClick={onStartCreateColumn}\r\n          disabled={isCreatingColumn}\r\n          icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n        >\r\n          Add another list\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { ColumnCreate };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport styles from './Input.module.scss';\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nfunction Input({ className, ...props }) {\r\n  return <input className={classes(className, styles.input)} {...props} />;\r\n}\r\n\r\nexport { Input };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport { Input } from 'components/FormControls/Input/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TasksActions } from 'redux/tasks';\r\nimport styles from './Column.module.scss';\r\n\r\nColumnNew.propTypes = {\r\n  toggleStartedCreatingColumn: PropTypes.func.isRequired,\r\n  onAddList: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction ColumnNew({ toggleStartedCreatingColumn, onAddList }) {\r\n  const newListTitle = useSelector((state) => state.tasks.newListTitle);\r\n  const isLoadingNewList = useSelector((state) => state.tasks.isLoadingNewList);\r\n  const dispatch = useDispatch();\r\n\r\n  function onChangeTitle(e) {\r\n    const { value } = e.target;\r\n\r\n    dispatch(TasksActions.onChangeNewListTitle(value));\r\n  }\r\n\r\n  function handleAddList(e) {\r\n    e.preventDefault();\r\n    if (!newListTitle.trim().length) return;\r\n\r\n    onAddList(newListTitle);\r\n  }\r\n\r\n  return (\r\n    <form className={classes(styles.column, styles['column--new'])} onSubmit={handleAddList} >\r\n      <div className={styles.column__header}>\r\n        <Input\r\n          className={styles.column__headerInput}\r\n          value={newListTitle}\r\n          onChange={onChangeTitle}\r\n          autoFocus\r\n          placeholder=\"Enter list title...\"\r\n        />\r\n      </div>\r\n      <div className={styles.column__buttons}>\r\n        <Button\r\n          type='submit'\r\n          className={styles['column__btn--create']}\r\n          loading={isLoadingNewList}\r\n          color=\"green\"\r\n          icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n        >\r\n          Add List\r\n        </Button>\r\n        <Button\r\n          displayType=\"icon\"\r\n          className={styles['column__btn--cancel']}\r\n          onClick={toggleStartedCreatingColumn}\r\n          disabled={isLoadingNewList}\r\n          color=\"transparent\"\r\n          icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport { ColumnNew };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from 'classnames';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport styles from './Textarea.module.scss';\r\n\r\nTextarea.propTypes = {\r\n  className: PropTypes.string,\r\n  inputRef: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\r\n};\r\nTextarea.defaultProps = {\r\n  className: '',\r\n};\r\n\r\nfunction Textarea({ className, inputRef, ...props }) {\r\n  return (\r\n    <TextareaAutosize\r\n      className={classes(styles.textarea, className)}\r\n      ref={inputRef}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Textarea };\r\n","import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Modal.module.scss';\r\n\r\nModal.propTypes = {\r\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  children: PropTypes.node,\r\n};\r\n\r\nModal.defaultProps = {\r\n  maxWidth: 350\r\n};\r\n\r\nfunction Modal({ maxWidth, children }) {\r\n  const modal = (\r\n    <div className={styles.modal}>\r\n      <div className={styles.modal__content} style={{ maxWidth }}>\r\n        {children}\r\n      </div>\r\n      <div className={styles.modal__overlay} />\r\n    </div>\r\n  );\r\n\r\n  return createPortal(modal, document.body);\r\n}\r\n\r\nexport { Modal };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport styles from 'components/Columns/ColumnCard/ColumnCard.module.scss';\r\n\r\nDeleteModal.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  isDeleting: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction DeleteModal({ title, maxWidth, isDeleting, onDelete, onCancel }) {\r\n  return (\r\n    <Modal maxWidth={maxWidth}>\r\n      <div className={styles['card__delete-modal']}>\r\n        <div className={styles['delete-modal__title']}>\r\n          Are you sure to delete {title}?\r\n        </div>\r\n        <div className={styles['delete-modal__actions']}>\r\n          <Button\r\n            className={styles['delete-modal__btn']}\r\n            onClick={onDelete}\r\n            loading={isDeleting}\r\n            color=\"red\"\r\n          >\r\n            Delete\r\n          </Button>\r\n          <Button\r\n            className={styles['delete-modal__btn']}\r\n            onClick={onCancel}\r\n            disabled={isDeleting}\r\n            color=\"dark-gray\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport { DeleteModal };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ColumnTitle.module.scss';\r\n\r\nColumnTitle.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction ColumnTitle({ children }) {\r\n  return <h3 className={styles.title}>{children}</h3>;\r\n}\r\n\r\nexport { ColumnTitle };\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { DeleteModal } from 'components/Columns/DeleteModal/DeleteModal';\r\nimport styles from './ColumnCard.module.scss';\r\n\r\nColumnCard.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  listId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction ColumnCard({ id, listId, title, onDeleteCard }) {\r\n  const isDeleting = useSelector((state) => state.tasks.isDeletingCard);\r\n  const [isInitedDelete, setIsInitedDelete] = useState(false);\r\n\r\n  function toggleInitDelete() {\r\n    setIsInitedDelete((prevState) => !prevState);\r\n  }\r\n\r\n  function onDelete() {\r\n    onDeleteCard(listId, id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.card}>\r\n        {title}\r\n        <Button\r\n          displayType=\"icon\"\r\n          className={styles['card__delete-btn']}\r\n          onClick={toggleInitDelete}\r\n          color=\"red\"\r\n          icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\r\n        />\r\n      </div>\r\n\r\n      {isInitedDelete && (\r\n        <DeleteModal\r\n          title={title}\r\n          isDeleting={isDeleting}\r\n          onDelete={onDelete}\r\n          onCancel={toggleInitDelete}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport { ColumnCard };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ColumnCards.module.scss';\r\nimport { ColumnCard } from '../ColumnCard/ColumnCard';\r\n\r\nColumnCards.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.object),\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\nColumnCards.defaultProps = {\r\n  cards: [],\r\n};\r\n\r\nfunction ColumnCards({ id, cards, onDeleteCard }) {\r\n  if (cards && !cards.length) return null;\r\n\r\n  return (\r\n    <ul className={styles.cards}>\r\n      {cards.map((card) => (\r\n        <ColumnCard\r\n          key={card.id}\r\n          id={card.id}\r\n          listId={id}\r\n          title={card.title}\r\n          onDeleteCard={onDeleteCard}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport { ColumnCards };\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport classes from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { TasksActions } from 'redux/tasks';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button } from 'components/FormControls/Button/Button';\r\nimport { Textarea } from 'components/FormControls/Textarea/Textarea';\r\nimport { DeleteModal } from 'components/Columns/DeleteModal/DeleteModal';\r\nimport { ColumnTitle } from '../ColumnTitle/ColumnTitle';\r\nimport { ColumnCards } from '../ColumnCards/ColumnCards';\r\nimport styles from './Column.module.scss';\r\n\r\nColumn.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  title: PropTypes.string,\r\n  cards: PropTypes.arrayOf(PropTypes.object),\r\n  onDeleteList: PropTypes.func.isRequired,\r\n  onAddCard: PropTypes.func.isRequired,\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\nColumn.defaultProps = {\r\n  cards: [],\r\n};\r\n\r\nfunction Column({ id, title, cards, onDeleteList, onAddCard, onDeleteCard }) {\r\n  const column = useSelector((state) => state.tasks.entities[id]);\r\n  const newCardTitle = useSelector((state) => state.tasks.newCardTitles[id]);\r\n  const isListDeleting = useSelector((state) => state.tasks.isDeletingList);\r\n  const [isStartedCreatingCard, setIsStartedCreatingCard] = useState(false);\r\n  const [isStartedDeletingList, setIsStartedDeletingList] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const cardTextareaRef = useRef();\r\n  const columnCardsRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const textareaElement = cardTextareaRef.current;\r\n\r\n    if (!isStartedCreatingCard || !textareaElement) return;\r\n\r\n    textareaElement.addEventListener('keypress', handleTextArea);\r\n\r\n    // eslint-disable-next-line\r\n    return () => {\r\n      if (!textareaElement) return;\r\n\r\n      textareaElement.removeEventListener('keypress', handleTextArea);\r\n    };\r\n  }, [cardTextareaRef, isStartedCreatingCard, newCardTitle]);\r\n\r\n  function handleTextArea(e) {\r\n    if (e && Number(e.which) === 13) {\r\n      e.preventDefault();\r\n      onCreateCard();\r\n    }\r\n  }\r\n\r\n  function toggleStartDeletingList() {\r\n    setIsStartedDeletingList((prevState) => !prevState);\r\n  }\r\n\r\n  function toggleStartCreatCard() {\r\n    if (!isStartedCreatingCard) {\r\n      dispatch(\r\n        TasksActions.onChangeNewCardTitle({\r\n          listId: id,\r\n          value: '',\r\n        })\r\n      );\r\n    }\r\n\r\n    setIsStartedCreatingCard((prevState) => !prevState);\r\n  }\r\n\r\n  function onChangeNewCardValue(e) {\r\n    const { value } = e.target;\r\n\r\n    dispatch(\r\n      TasksActions.onChangeNewCardTitle({\r\n        listId: id,\r\n        value,\r\n      })\r\n    );\r\n  }\r\n\r\n  function onDelList() {\r\n    onDeleteList(id);\r\n  }\r\n\r\n  function onCreateCard() {\r\n    if (!newCardTitle.trim().length) return;\r\n    onAddCard({\r\n      listId: id,\r\n      title: newCardTitle,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.column}>\r\n        {title && (\r\n          <div className={styles.column__header}>\r\n            <ColumnTitle>{title}</ColumnTitle>\r\n            <Button\r\n              displayType=\"icon\"\r\n              className={styles['column__delete-list-btn']}\r\n              onClick={toggleStartDeletingList}\r\n              color=\"red\"\r\n              icon={<FontAwesomeIcon icon={faTrashAlt} />}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div\r\n          ref={columnCardsRef}\r\n          className={classes(\r\n            styles.column__cards,\r\n            `dashboard__column-${id}-cards`\r\n          )}\r\n        >\r\n          <ColumnCards cards={cards} id={id} onDeleteCard={onDeleteCard} />\r\n\r\n          {isStartedCreatingCard && (\r\n            <Textarea\r\n              inputRef={cardTextareaRef}\r\n              value={newCardTitle}\r\n              onChange={onChangeNewCardValue}\r\n              placeholder=\"Enter a title for this card...\"\r\n              minRows={3}\r\n              maxRows={7}\r\n              autoFocus\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.column__buttons}>\r\n          {isStartedCreatingCard && (\r\n            <>\r\n              <Button\r\n                className={styles['column__btn--create']}\r\n                onClick={onCreateCard}\r\n                loading={column.isCreatingCard}\r\n                color=\"green\"\r\n                icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n              >\r\n                Add Card\r\n              </Button>\r\n              <Button\r\n                displayType=\"icon\"\r\n                onClick={toggleStartCreatCard}\r\n                className={styles['column__btn--cancel']}\r\n                color=\"transparent\"\r\n                disabled={column.isCreatingCard}\r\n                icon={<FontAwesomeIcon icon={faTimes} size=\"lg\" />}\r\n              />\r\n            </>\r\n          )}\r\n          {!isStartedCreatingCard && (\r\n            <Button\r\n              onClick={toggleStartCreatCard}\r\n              className={styles.column__btn}\r\n              icon={<FontAwesomeIcon icon={faPlus} size=\"sm\" />}\r\n            >\r\n              Add a card\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {isStartedDeletingList && (\r\n        <DeleteModal\r\n          title={title}\r\n          maxWidth={400}\r\n          isDeleting={isListDeleting}\r\n          onDelete={onDelList}\r\n          onCancel={toggleStartDeletingList}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport { Column };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ColumnCreate } from './Column/ColumnCreate';\r\nimport { ColumnNew } from './Column/ColumnNew';\r\nimport { Column } from './Column/Column';\r\nimport styles from './Columns.module.scss';\r\n\r\nColumns.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.object),\r\n  onAddList: PropTypes.func.isRequired,\r\n  onDeleteList: PropTypes.func.isRequired,\r\n  onAddCard: PropTypes.func.isRequired,\r\n  onDeleteCard: PropTypes.func.isRequired,\r\n};\r\nColumns.defaultProps = {\r\n  columns: [],\r\n};\r\n\r\nfunction Columns({\r\n  columns,\r\n  onAddList,\r\n  onDeleteList,\r\n  onAddCard,\r\n  onDeleteCard,\r\n}) {\r\n  const [isStartedCreatingColumn, setIsStartedCreatingColumn] = useState(false);\r\n\r\n  function toggleStartedCreatingColumn() {\r\n    setIsStartedCreatingColumn((prevState) => !prevState);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.columns}>\r\n      {columns.map((column) => (\r\n        <Column\r\n          key={column.id}\r\n          id={column.id}\r\n          cards={column.cards}\r\n          title={column.title}\r\n          onAddCard={onAddCard}\r\n          onDeleteList={onDeleteList}\r\n          onDeleteCard={onDeleteCard}\r\n        />\r\n      ))}\r\n      {isStartedCreatingColumn && (\r\n        <ColumnNew\r\n          onAddList={onAddList}\r\n          toggleStartedCreatingColumn={toggleStartedCreatingColumn}\r\n        />\r\n      )}\r\n      <ColumnCreate\r\n        isCreatingColumn={isStartedCreatingColumn}\r\n        onStartCreateColumn={toggleStartedCreatingColumn}\r\n      />\r\n      <div className={styles['columns__demy-column']} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Columns };\r\n","import React, { Component } from 'react';\r\nimport classes from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { injectSaga } from 'redux-injectors';\r\nimport { watchersTasks } from 'redux/tasks/sagas';\r\nimport { Columns } from 'components/Columns/Columns';\r\nimport { TasksActions, TasksSelectors } from 'redux/tasks';\r\nimport styles from './Dashboard.module.scss';\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    const { getTasks } = this.props;\r\n    getTasks();\r\n  }\r\n\r\n  onAddList = (title) => {\r\n    const { startCreateList } = this.props;\r\n    startCreateList({ title });\r\n  };\r\n\r\n  onDeleteList = (listId) => {\r\n    const { startDeletingList } = this.props;\r\n    startDeletingList(listId);\r\n  };\r\n\r\n  onAddCard = (payload) => {\r\n    const { startCreateCard } = this.props;\r\n    startCreateCard(payload);\r\n  };\r\n\r\n  onDeleteCard = (listId, cardId) => {\r\n    const { startDeletingCard } = this.props;\r\n\r\n    startDeletingCard({ listId, cardId });\r\n  };\r\n\r\n  render() {\r\n    const { tasks } = this.props;\r\n    return (\r\n      <div className={classes(styles.dashboard, 'dashboard-page')}>\r\n        <Columns\r\n          columns={tasks}\r\n          onAddList={this.onAddList}\r\n          onDeleteList={this.onDeleteList}\r\n          onAddCard={this.onAddCard}\r\n          onDeleteCard={this.onDeleteCard}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  tasks: PropTypes.arrayOf(PropTypes.object),\r\n  getTasks: PropTypes.func.isRequired,\r\n  startCreateList: PropTypes.func.isRequired,\r\n  startDeletingList: PropTypes.func.isRequired,\r\n  startCreateCard: PropTypes.func.isRequired,\r\n  startDeletingCard: PropTypes.func.isRequired,\r\n};\r\n\r\nDashboard.defaultProps = {\r\n  tasks: [],\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: TasksSelectors.selectAll(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTasks: () => dispatch(TasksActions.getTasks()),\r\n  startCreateList: (title) => dispatch(TasksActions.startCreateList(title)),\r\n  startDeletingList: (listId) =>\r\n    dispatch(TasksActions.startDeletingList(listId)),\r\n  startCreateCard: (payload) => dispatch(TasksActions.startCreateCard(payload)),\r\n  startDeletingCard: (payload) =>\r\n    dispatch(TasksActions.startDeletingCard(payload)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(injectSaga({ key: 'tasks', saga: watchersTasks })(Dashboard));\r\n","import React from 'react';\r\nimport Dashboard from 'views/Dashboard/Dashboard';\r\n\r\nfunction App() {\r\n  return <Dashboard />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'normalize.css';\r\nimport './styles/styles.scss';\r\nimport { store } from 'redux/store';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ColumnCard_card__3qMqY\",\"card__delete-btn\":\"ColumnCard_card__delete-btn__3lY27\",\"delete-modal__title\":\"ColumnCard_delete-modal__title__3Y0eQ\",\"delete-modal__actions\":\"ColumnCard_delete-modal__actions__7AQly\",\"delete-modal__btn\":\"ColumnCard_delete-modal__btn__Lszce\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2XPbj\",\"button--with-icon\":\"Button_button--with-icon__2mTBF\",\"button__text\":\"Button_button__text__3pwWn\",\"icon\":\"Button_icon__1WJdU\",\"green\":\"Button_green__1TOMw\",\"red\":\"Button_red__3fO7b\",\"dark-gray\":\"Button_dark-gray__nL9kN\",\"transparent\":\"Button_transparent__17AuW\",\"loading\":\"Button_loading__VYV8W\",\"button__icon\":\"Button_button__icon__3WrMJ\",\"button__spinner\":\"Button_button__spinner__KASpU\",\"spinner\":\"Button_spinner__3OUQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3kgh3\",\"modal__content\":\"Modal_modal__content__1ILQq\",\"modal__overlay\":\"Modal_modal__overlay__c1s7q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"columns\":\"Columns_columns__lzzwH\",\"columns__demy-column\":\"Columns_columns__demy-column__WrYhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"Column_column__3yOFN\",\"column__header\":\"Column_column__header__1h3fQ\",\"column--new\":\"Column_column--new__2yyfC\",\"column__delete-list-btn\":\"Column_column__delete-list-btn__3wwCm\",\"column__headerInput\":\"Column_column__headerInput__3RRuk\",\"column__cards\":\"Column_column__cards__2EVMA\",\"column__buttons\":\"Column_column__buttons__25buy\",\"column--create\":\"Column_column--create__3V9bk\",\"column__btn\":\"Column_column__btn__3Hseg\",\"column__btn--create\":\"Column_column__btn--create__3t0ct\",\"column__btn--cancel\":\"Column_column__btn--cancel__auBDM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2ZPX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__20Vs3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ColumnTitle_title__3gobv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"ColumnCards_cards__-bKoe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__3f3Dv\"};"],"sourceRoot":""}